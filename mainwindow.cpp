#define _CRT_SECURE_NO_WARNINGS

#include <QFileDialog>
#include <QDir>
#include <string>
#include <stdlib.h>
#include <stdio.h>
#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "ErrorHandler.h"
#include "SocketInfo.h"
#include "Helpers.h"

/*------------------------------------------------------------------------------------------------------------------
-- SOURCE FILE: MainWindow.cpp - This file contains the implementation of the main application window.
--
-- PROGRAM: Knekt
--
-- FUNCTIONS:
-- void setSentData(unsigned long bytesSent, unsigned int packets)
-- void setReceivedData(unsigned long bytesReceived, unsigned int packets)
-- void setTimeElapsedOutput(int)
-- int getPacketSize(void)
-- int getNumberOfTimesToSend(void)
-- void on_actionTCP_triggered(void)
-- void on_actionUDP_triggered(void)
-- void on_actionClient_triggered(void)
-- void on_actionServer_triggered(void)
-- void on_connectBtn_clicked(void)
-- void on_sendPacketBtn_clicked(void)
-- void on_sendFileBtn_clicked(void)
-- void on_receiveBtn_clicked(void)
-- void on_saveInputCheckbox_clicked(void)
-- static DWORD WINAPI UIThread(void* param)
-- static DWORD WINAPI SendThread(void* param)
-- Connection* getConnection(void) const
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- NOTES:
-- This source file is auto-generated by Qt upon creating the project.
------------------------------------------------------------------------------------------------------------------*/

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    ui->receiveBtn->hide();
}

MainWindow::~MainWindow()
{
    delete ui;
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: on_actionTCP_triggered
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: void on_actionTCP_triggered(void)
--
-- RETURNS: void
--
-- NOTES:
-- Call this function to toggle the protocol type to TCP.
------------------------------------------------------------------------------------------------------------------*/
void MainWindow::on_actionTCP_triggered()
{
    ui->actionUDP->setChecked(false);
    protocolType = ProtocolType::TCP;
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: on_actionUDP_triggered
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: void on_actionUDP_triggered(void)
--
-- RETURNS: void
--
-- NOTES:
-- Call this function to toggle the protocol type to UDP.
------------------------------------------------------------------------------------------------------------------*/
void MainWindow::on_actionUDP_triggered()
{
    ui->actionTCP->setChecked(false);
    protocolType = ProtocolType::UDP;
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: on_actionClient_triggered
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: void on_actionClient_triggered(void)
--
-- RETURNS: void
--
-- NOTES:
-- Call this function to toggle the visibility of the client input and the connection type.
------------------------------------------------------------------------------------------------------------------*/
void MainWindow::on_actionClient_triggered()
{
    ui->actionServer->setChecked(false);
    ui->ipAddressInput->setHidden(!ui->actionClient->isChecked());
    ui->ipAddressLabel->setHidden(!ui->actionClient->isChecked());
    connectionType = ConnectionType::CLIENT;
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: on_actionServer_triggered
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: void on_actionServer_triggered(void)
--
-- RETURNS: void
--
-- NOTES:
-- Call this function to toggle the visibility of the server input and the connection type.
------------------------------------------------------------------------------------------------------------------*/
void MainWindow::on_actionServer_triggered()
{
    ui->actionClient->setChecked(false);
    ui->ipAddressInput->setHidden(ui->actionServer->isChecked());
    ui->ipAddressLabel->setHidden(ui->actionServer->isChecked());
    connectionType = ConnectionType::SERVER;
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: on_connectBtn_clicked
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: void on_connectBtn_clicked(void)
--
-- RETURNS: void
--
-- NOTES:
-- Call this function to create a Connection object.
------------------------------------------------------------------------------------------------------------------*/
void MainWindow::on_connectBtn_clicked()
{
    if (!(ui->actionServer->isChecked() ||
          ui->actionClient->isChecked()) ||
            !(ui->actionTCP->isChecked() ||
              ui->actionUDP->isChecked())) {
        ErrorHandler::showMessage("Please choose connection type and action!");
        return;
    }

    QString rawPort = ui->portInput->text();
    if (rawPort.isEmpty()) {
        ErrorHandler::showMessage("Please enter port number");
        return;
    }

    int port = rawPort.toInt();
    isConnected = !isConnected;
    if (isConnected) {
        ui->connectBtn->setText("Stop connection");
        if (connectionType == ConnectionType::CLIENT && ui->ipAddressInput->text().isEmpty()) {
            ErrorHandler::showMessage("Please input IP address");
            return;
        }
        QString rawIp = ui->ipAddressInput->text();
        std::string stringIp = rawIp.toStdString();
        const char *ipAddress = stringIp.c_str();
        currConnection = ConnectivityManager::instance()->initializeConnection(connectionType, protocolType, port, ipAddress);

        ui->receiveBtn->setHidden(connectionType != ConnectionType::SERVER);
    } else {
        ui->connectBtn->setText("Connect");
        ui->receiveBtn->hide();
        ConnectivityManager::instance()->closeConnection(currConnection);
    }
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: on_sendPacketBtn_clicked
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: void on_sendPacketBtn_clicked(void)
--
-- RETURNS: void
--
-- NOTES:
-- Call this function to send data to a server.
------------------------------------------------------------------------------------------------------------------*/
void MainWindow::on_sendPacketBtn_clicked()
{
    if (isConnected && connectionType == ConnectionType::CLIENT) {
        SendThreadHandle = CreateThread(NULL, 0, SendThread, (void *) this, 0, &SendThreadId);

        ui->sendPacketBtn->setText("Sending...");
        if(WaitForSingleObject(SendThreadHandle, INFINITE)) {
            ErrorHandler::showMessage("Error sending packets");
        }
        CloseHandle(SendThreadHandle);
        isConnected = !isConnected;
        ConnectivityManager::instance()->closeConnection(currConnection);
        ui->connectBtn->setText("Connect");
        ui->sendPacketBtn->setText("Send Packet");
    }
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: on_receiveBtn_clicked
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: void on_receiveBtn_clicked(void)
--
-- RETURNS: void
--
-- NOTES:
-- Call this function to start a thread to receive incoming data.
------------------------------------------------------------------------------------------------------------------*/
void MainWindow::on_receiveBtn_clicked()
{
    isReceiving = !isReceiving;
    if (isReceiving) {
        int packetSize = getPacketSize();
        currConnection->startRoutine(packetSize);
        ui->receiveBtn->setText("Stop receiving");
        if ((UIThreadHandle = CreateThread(NULL, 0, UIThread, (LPVOID) this, 0, &UIThreadId)) == NULL)
        {
            ErrorHandler::showMessage("Error creating UI thread");
            exit(1);
        }
    } else {
        ui->receiveBtn->setText("Begin receiving");
        CloseHandle(UIThreadHandle);
        currConnection->stopRoutine();
    }
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: on_sendFileBtn_clicked
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: void on_sendFileBtn_clicked(void)
--
-- RETURNS: void
--
-- NOTES:
-- Call this function to send a file to the server.
------------------------------------------------------------------------------------------------------------------*/
void MainWindow::on_sendFileBtn_clicked()
{
    QString filePath = QFileDialog::getOpenFileName(this, "Open a file", "", "Text files (*.txt)");
    currConnection->sendFileToServer(filePath.toStdString().c_str());
    LPSOCKET_INFORMATION SI = currConnection->getSocketInfo();
    ui->bytesSentOutput->setText(QString::number(SI->TotalBytesSend));
    ui->packetsSentOutput->setText(QString::number(SI->packetCount++));
    ConnectivityManager::instance()->closeConnection(currConnection);
    return;
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: getPacketSize
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: int getPacketSize(void)
--
-- RETURNS: int
--
-- NOTES:
-- Returns the packet size selected by the user.
------------------------------------------------------------------------------------------------------------------*/
int MainWindow::getPacketSize() {
    QComboBox *packetSizeComboBox = ui->packetSizeOptions;
    QString packetSizeValue = packetSizeComboBox->itemText(packetSizeComboBox->currentIndex());
    int numberOfBytesToSend = packetSizeValue.toInt();
    return numberOfBytesToSend;
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: getNumberOfTimesToSend
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: int getNumberOfTimesToSend(void)
--
-- RETURNS: int
--
-- NOTES:
-- Returns the number of times to send selected by the user.
------------------------------------------------------------------------------------------------------------------*/
int MainWindow::getNumberOfTimesToSend() {
    QComboBox *packetCountComboBox = ui->numberOfTimesOptions;
    QString packetCountValue = packetCountComboBox->itemText(packetCountComboBox->currentIndex());
    int numberOfTimesToSend = packetCountValue.toInt();
    return numberOfTimesToSend;
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: setSentData
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: void setSentData(unsigned long bytesSent, unsigned int packets)
--              unsigned long bytesSent - number of bytes sent to display
--              unsigned int packets - number of packets sent to display
--
-- RETURNS: void
--
-- NOTES:
-- Sets the display output for sent data.
------------------------------------------------------------------------------------------------------------------*/
void MainWindow::setSentData(unsigned long bytesSent, unsigned int packets) {
    mtx.lock();
    ui->bytesSentOutput->setText(QString::number(bytesSent));
    ui->packetsSentOutput->setText(QString::number(packets));
    mtx.unlock();
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: setReceivedData
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: void setReceivedData(unsigned long bytesReceived, unsigned int packets)
--              unsigned long bytesReceived - number of bytes received to display
--              unsigned int packets - number of packets received to display
--
-- RETURNS: void
--
-- NOTES:
-- Sets the display output for received data.
------------------------------------------------------------------------------------------------------------------*/
void MainWindow::setReceivedData(unsigned long bytesReceived, unsigned int packets) {
    mtx.lock();
    ui->packetsReceivedOutput->setText(QString::number(packets));
    ui->bytesReceivedOutput->setText(QString::number(bytesReceived));
    mtx.unlock();
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: setTimeElapsedOutput
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: void setTimeElapsedOutput(int time)
--              int time - time elapsed to display
--
-- RETURNS: void
--
-- NOTES:
-- Sets the display output for time elapsed.
------------------------------------------------------------------------------------------------------------------*/
void MainWindow::setTimeElapsedOutput(int time) {
    mtx.lock();
    ui->timeElapsedOutput->setText(QString::number(time));
    mtx.unlock();
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: on_saveInputCheckbox_clicked
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: void on_saveInputCheckbox_clicked(void)
--
-- RETURNS: void
--
-- NOTES:
-- Call this to set the flag for saving data.
------------------------------------------------------------------------------------------------------------------*/
void MainWindow::on_saveInputCheckbox_clicked()
{
    LPSOCKET_INFORMATION SI = currConnection->getSocketInfo();
    SI->saveInputToFile = ui->saveInputCheckbox->isChecked();
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: SendThread
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: DWORD WINAPI SendThread(void* param)
--      void* param - pointer to a MainWindow object
--
-- RETURNS: DWORD
--
-- NOTES:
-- Call this to initiate the sending sequence.
------------------------------------------------------------------------------------------------------------------*/
DWORD WINAPI MainWindow::SendThread(void* param) {
    MainWindow* window = (MainWindow*) param;
    Connection* connection = window->getConnection();
    LPSOCKET_INFORMATION SI = connection->getSocketInfo();

    int packetSize = window->getPacketSize();
    int count = window->getNumberOfTimesToSend();

    char* output = (char*)malloc(packetSize);
    memset(output, 'a', packetSize);

    SI->TotalBytesSend = 0;
    for(int i = 0; i < count; i++) {
        if (connection->sendToServer(output) == FALSE) {
            return FALSE;
        }
        window->setSentData(SI->TotalBytesSend, SI->packetCount);
    }
    return 1;
}

/*------------------------------------------------------------------------------------------------------------------
-- FUNCTION: UIThread
--
-- DATE: Feb 17, 2020
--
-- REVISIONS: N/A
--
-- DESIGNER: Henry Ho
--
-- PROGRAMMER: Henry Ho
--
-- INTERFACE: DWORD WINAPI SendThread(void* param)
--      void* param - pointer to a MainWindow object
--
-- RETURNS: DWORD
--
-- NOTES:
-- Call this to set the received data output.
------------------------------------------------------------------------------------------------------------------*/
DWORD WINAPI MainWindow::UIThread(void* param) {
    int res;
    MainWindow* window = (MainWindow*) param;
    Connection* connection = (Connection*)window->getConnection();
    LPSOCKET_INFORMATION socketInfo = connection->getSocketInfo();
    window->setReceivedData(0, 0);
    window->setTimeElapsedOutput(0);
    WSAResetEvent(socketInfo->EndEvent);
    res = WaitForSingleObject(socketInfo->EndEvent, INFINITE);
    if (res != WAIT_OBJECT_0) {
        perror("Waiting for end event failed");
        WSAResetEvent(socketInfo->EndEvent);
        return 0;
    }
    window->setReceivedData(socketInfo->TotalBytesRecv, socketInfo->packetCount);
    window->setTimeElapsedOutput(delay(socketInfo->stStartTime, socketInfo->stEndTime));
    WSAResetEvent(socketInfo->EndEvent);
    return 1;
}
